// This file was generated by PermissionsDispatcher. Do not modify!
package com.murainy.safeexam.activitis;

import java.lang.Override;
import java.lang.String;
import java.lang.ref.WeakReference;
import permissions.dispatcher.PermissionRequest;
import permissions.dispatcher.PermissionUtils;

final class BasicFragmentPermissionsDispatcher {
  private static final int REQUEST_PICKIMAGE = 0;

  private static final String[] PERMISSION_PICKIMAGE = new String[] {"android.permission.READ_EXTERNAL_STORAGE"};

  private static final int REQUEST_CROPIMAGE = 1;

  private static final String[] PERMISSION_CROPIMAGE = new String[] {"android.permission.WRITE_EXTERNAL_STORAGE"};

  private BasicFragmentPermissionsDispatcher() {
  }

  static void pickImageWithCheck(BasicFragment target) {
    if (PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_PICKIMAGE)) {
      target.pickImage();
    } else {
      if (PermissionUtils.shouldShowRequestPermissionRationale(target.getActivity(), PERMISSION_PICKIMAGE)) {
        target.showRationaleForPick(new PickImagePermissionRequest(target));
      } else {
        target.requestPermissions(PERMISSION_PICKIMAGE, REQUEST_PICKIMAGE);
      }
    }
  }

  static void cropImageWithCheck(BasicFragment target) {
    if (PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_CROPIMAGE)) {
      target.cropImage();
    } else {
      if (PermissionUtils.shouldShowRequestPermissionRationale(target.getActivity(), PERMISSION_CROPIMAGE)) {
        target.showRationaleForCrop(new CropImagePermissionRequest(target));
      } else {
        target.requestPermissions(PERMISSION_CROPIMAGE, REQUEST_CROPIMAGE);
      }
    }
  }

  static void onRequestPermissionsResult(BasicFragment target, int requestCode,
      int[] grantResults) {
    switch (requestCode) {
      case REQUEST_PICKIMAGE:
      if (PermissionUtils.getTargetSdkVersion(target.getActivity()) < 23 && !PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_PICKIMAGE)) {
        return;
      }
      if (PermissionUtils.verifyPermissions(grantResults)) {
        target.pickImage();
      }
      break;
      case REQUEST_CROPIMAGE:
      if (PermissionUtils.getTargetSdkVersion(target.getActivity()) < 23 && !PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_CROPIMAGE)) {
        return;
      }
      if (PermissionUtils.verifyPermissions(grantResults)) {
        target.cropImage();
      }
      break;
      default:
      break;
    }
  }

  private static final class PickImagePermissionRequest implements PermissionRequest {
    private final WeakReference<BasicFragment> weakTarget;

    private PickImagePermissionRequest(BasicFragment target) {
      this.weakTarget = new WeakReference<>(target);
    }

    @Override
    public void proceed() {
      BasicFragment target = weakTarget.get();
      if (target == null) return;
      target.requestPermissions(PERMISSION_PICKIMAGE, REQUEST_PICKIMAGE);
    }

    @Override
    public void cancel() {
    }
  }

  private static final class CropImagePermissionRequest implements PermissionRequest {
    private final WeakReference<BasicFragment> weakTarget;

    private CropImagePermissionRequest(BasicFragment target) {
      this.weakTarget = new WeakReference<>(target);
    }

    @Override
    public void proceed() {
      BasicFragment target = weakTarget.get();
      if (target == null) return;
      target.requestPermissions(PERMISSION_CROPIMAGE, REQUEST_CROPIMAGE);
    }

    @Override
    public void cancel() {
    }
  }
}
